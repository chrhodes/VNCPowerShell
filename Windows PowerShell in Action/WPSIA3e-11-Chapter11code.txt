## Code for chapter 11 PowerShell in Action third edition
##  This file contains the code from the chapter body. 
##  Any individual listings are supplied in separate files
##  Code has been unwrapped so may look slightly different 
##  to that presented in the book


## 11.1.1 Commands with built-in remoting
Get-Help * -Parameter ComputerName
Get-Command -ParameterName ComputerName

Get-Command -ParameterName Cimsession

Get-Service -Name BITS -ComputerName W16TGT01, W16DSC02

Get-Service -Name BITS -ComputerName W16TGT01, W16DSC02 |
select Status, Name, MachineName


## 11.1.2 The PowerShell remoting subsystem
Invoke-Command -ScriptBlock {Get-Service -Name BITS} `
-ComputerName W16TGT01, W16DSC02


## 11.2.1 Basic remoting examples
1..3 | sort -Descending

1..3 |
Invoke-Command -ComputerName localhost -ScriptBlock {sort -Descending}

Invoke-Command -ComputerName localhost -ScriptBlock { 1..3 } |
sort -Descending

1..3 | Invoke-Command -ComputerName localhost -ScriptBlock {
  'First'
  $input | sort -Descending
  'Last'
}


## 11.2.2 Adding concurrency to the examples
1..3 | foreach { Write-Host $_ -ForegroundColor green;
$_; Start-Sleep 5 } | Write-Host

1..3 | foreach {
  Write-Host -ForegroundColor green $_
  $_; Start-Sleep 5 } |
Invoke-Command -ComputerName localhost -ScriptBlock { Write-Host }

1..3 | foreach { Write-Host $_ -ForegroundColor green ; $_ } |
Invoke-Command -ComputerName localhost -ScriptBlock { Write-Host }


## 11.2.3 Solving a real problem: multi-machine monitoring
see listing 11.1.ps1


## 11.3 PowerShell remoting sessions and persistent connections
Measure-Command { 1..5 |
foreach { Invoke-Command W16TGT01 {Get-Date} } } |
Format-Table -AutoSize TotalSeconds

Measure-Command {
$s = New-PSSession W16TGT01
1..5 |
foreach { Invoke-Command $s {Get-Date} }
Remove-PSSession $s
} |
Format-Table -AutoSize TotalSeconds


## 11.3.2 Using the New-PSSession cmdlet
$s = New-PSSession -ComputerName localhost

Invoke-Command -Session $s -ScriptBlock {$PID}
$PID

Invoke-Command -Session $s -ScriptBlock {$x=1234}

Invoke-Command -Session $s -ScriptBlock {
function hi {"Hello there, x is $x"}
}
Invoke-Command -Session $s -ScriptBlock {hi}


## 11.3.4 Managing PowerShell sessions
Get-PSSession |
Format-List Id, Name, ComputerName, ComputerType, State,
ConfigurationName, Availability

Get-PSSession -ComputerName W16TGT01 |
Format-List Id, Name, ComputerName, ComputerType, State,
ConfigurationName, Availability

Get-PSSession -ComputerName W16TGT01 |
Format-Table Id, Name, ComputerName, State,
Availability -AutoSize

Get-PSSession -ComputerName W16TGT01 |
Format-Table Id, Name, ComputerName, State,
Availability -AutoSize

Connect-PSSession -ComputerName W16TGT01

$s = Get-PSSession -Name FromW16AS01
Invoke-Command -Session $s -ScriptBlock `
{Get-CimInstance Win32_OperatingSystem}

Get-PSSession -ComputerName W16TGT01 |
Format-Table Id, Name, ComputerName, State,
Availability -AutoSize

Connect-PSSession -Name FromW16DSC01 -ComputerName W16TGT01
Get-PSSession -ComputerName W16TGT01 |
Format-Table Id, Name, ComputerName, State,
Availability -AutoSize


## 11.3.5 Copying files across a PowerShell remoting session
$s1 = New-PSSession -ComputerName W16TGT01
$s2 = New-PSSession -ComputerName W16DSC02

Invoke-Command -Session $s1 -ScriptBlock {
Get-Process | Out-File -FilePath c:\scripts\proc.txt}

Copy-Item -Path c:\scripts\proc.txt -FromSession $s1
Copy-Item -Path proc.txt -Destination C:\Scripts\ -ToSession $s2

Invoke-Command -Session $s2 `
-ScriptBlock {Get-ChildItem -Path C:\Scripts\}

Copy-Item -Path c:\scripts\proc.txt -Destination C:\Scripts\ `
-FromSession $s1 -ToSession $s2


## 11.4.1 Using implicit remoting
$s = New-PSSession -ComputerName W16TGT01
Invoke-Command -Session $s -ScriptBlock {
function Get-Bios {Get-WmiObject Win32_Bios}}

Import-PSSession -Session $s -CommandName Get-Bios

Get-Bios


## 11.4.2 How implicit remoting works
Get-Command Get-Bios

see listing 11.2.ps1

Get-Content (Get-Command Get-Bios).Module.Path

Export-PSSession -OutputModule bios -Session $s `
-type function -CommandName Get-Bios -AllowClobber

Import-Module bios

Get-Bios


## 11.5.2 Profiles and remoting
$c = Get-Credential
$s = New-PSSession -Credential $c -ComputerName targetComputer
Invoke-Command -Session $s -FilePath $PROFILE
Enter-PSSession $s

$c = Get-Credential
$s = New-PSSession -Credential $ -ComputerName targetComputer
Invoke-Command -Session $s {
. "$home\Documents\WindowsPowerShell\profile.ps1" }
Enter-PSSession $s


## 11.5.4 Using files and scripts
$s = New-PSSession -ComputerName W16TGT01

Invoke-Command -Session $s -ScriptBlock {C:\Scripts\PiA3e\FileTest.ps1}

Invoke-Command -Session $s -FilePath C:\Scripts\PiA3e\FileTest.ps1


## 11.5.5 Using local variables in remote sessions
$myvar = 123
Invoke-Command -Session $s -ScriptBlock {"myvar is $myvar"}
Invoke-Command -Session $s -ScriptBlock {"myvar is $using:myvar"}

Invoke-Command -Session $s { $using:myvar = 13 }


## 11.5.8 Processor architecture issues
Invoke-Command -ConfigurationName microsoft.powershell32 `
-ComputerName localhost { $ENV:PROCESSOR_ARCHITECTURE }

Invoke-Command -ConfigurationName microsoft.powershell `
-ComputerName localhost { $ENV:PROCESSOR_ARCHITECTURE }


## 11.6 Building custom remoting services
## 11.6.2 Creating a custom configuration
## Session configuration

@'
function Get-PageFaultRate {
(Get-WmiObject Win32_PerfRawData_PerfOS_Memory).PageFaultsPersec
}
'@ > Initialize-HMConfiguration.ps1

Register-PSSessionConfiguration -Name wpia1 -StartupScript $pwd/Initialize-HMConfiguration.ps1 -Force

dir wsman:\localhost\plugin

Invoke-Command localhost -ConfigurationName wpia1 {Get-PageFaultRate }


## 11.6.3 Access controls and endpoints
Set-PSSessionConfiguration Microsoft.PowerShell -ShowSecurityDescriptorUI
Restart-Service winrm


## Setting security descriptors on configurations
Get-Item wsman:\localhost\Service\RootSDDL


## 11.6.4 Constraining a PowerShell session
New-PSSessionConfigurationFile -Path .\Defaults.pssc
# see defaults.pssc

# see complexconstrainedconfiguration.ps1 - listing 11.3

Test-PSSessionConfigurationFile -Path .\ComplexConstrainedConfiguration.pssc -Verbose

Test-PSSessionConfigurationFile -Path .\ErrorConfiguration.pssc -Verbose

Unregister-PSSessionConfiguration -Name wpiaccs -Force
Register-PSSessionConfiguration –Path .\ComplexConstrainedConfiguration.pssc -Name wpiaccs -Force

dir WSMan:\localhost\Plugin\

$s = New-PSSession -ComputerName localhost -ConfigurationName wpiaccs
Invoke-Command -Session $s -ScriptBlock {Get-Command | select Name}

Get-Command | Measure-Object | select Count
Invoke-Command -Session $s -ScriptBlock {get-healthmodel}

Invoke-Command -Session $s -ScriptBlock {Get-Date}
Invoke-Command -Session $s -ScriptBlock { & {Get-Date}}
Invoke-Command -Session $s -ScriptBlock {Get-Module -ListAvailable}

Invoke-Command -Session $s -ScriptBlock {$x = 123; $x}
Invoke-Command -Session $s -ScriptBlock {ping 127.0.0.1}

# see testch11.ps1
Invoke-Command -Session $s -ScriptBlock {C:\TestScripts\testch11.ps1}


## 11.7 PowerShell Direct
Get-VM | where State -eq 'Running' | select Name, Id

$cred = Get-Credential -Credential W16TGT01\Administrator
Invoke-Command -VMName W16TGT01 -ScriptBlock {Get-Process} -Credential $cred

Invoke-Command -VMId be4a5a3f-fc20-49f9-bb0f-b575c85e5734 -ScriptBlock {Get-Process} -Credential $cred
Invoke-Command -VMGuid be4a5a3f-fc20-49f9-bb0f-b575c85e5734 -ScriptBlock {Get-Process} -Credential $cred

$s = New-PSSession -VMName W16TGT01 -Credential $cred
Invoke-Command -Session $s -ScriptBlock {Get-Process}

Enter-PSSession -VMName W16TGT01 -Credential $cred